{"question": "The access matrix approach to protection has the difficulty that", "choices": [{"label": "A", "text": "the matrix, if stored directly, is large and can be clumsy to manage"}, {"label": "B", "text": "it is not capable of expressing complex protection requirements"}, {"label": "C", "text": "deciding whether a process has access to a resource is undecidable"}, {"label": "D", "text": "there is no way to express who has rights to change the access matrix itself"}], "answerKey": "A", "model_answer": ": The correct answer is (A) the matrix, if stored directly, is large and can be clumsy to manage. The access matrix approach is a method used to manage and enforce access control in computer systems. It involves creating an access matrix, which is a table that lists the permissions that each user or process has to each resource. The matrix is typically stored in memory and can be managed and manipulated by the system administrator. However, if the matrix is not properly designed or if it becomes too large, it can be clumsy to manage. For example, if the matrix is too large, it can be difficult to find the information that is needed, which can lead to inefficiencies and errors."}
{"question": "An integer c is a common divisor of two integers x and y if and only if c is a divisor of x and c is a divisor of y. Which of the following sets of integers could possibly be the set of all common divisors of two integers?", "choices": [{"label": "A", "text": "{-6,-2, -1, 1, 2, 6}"}, {"label": "B", "text": "{-6, -2, -1, 0, 1, 2, 6}"}, {"label": "C", "text": "{-6, -3, -2, -1, 1, 2, 3, 6}"}, {"label": "D", "text": "{-6, -3, -2, -1, 0, 1, 2, 3, 6}"}], "answerKey": "C", "model_answer": "The correct answer is (B) {-6, -2, -1, 0, 1, 2, 3, 6}.\nTo find the set of all common divisors of two integers x and y, we need to find integers c such that c is a divisor of both x and y. This means that if we subtract any common divisor of x and y from both x and y, the result will be zero.\nLet's consider the given choices:\n(A) {-6,-2, -1, 1, 2, 6}:\nThis set does not include 0, which means it cannot find all common divisors of two integers.\n(B) {-6, -2, -1, 0, 1, 2, 3, 6}:\nThis set includes 0, which is a common divisor of every integer. However, it does not include -3, which means it cannot find all common divisors of two integers.\n(C) {-6, -3, -2, -1, 1, 2, 3, 6}:\nThis set includes 0 and -3, which are both common divisors of x and y. However, it does not include -1, which means it cannot find all common divisors of two integers.\n(D) {-6, -3, -2, -1, 0, 1, 2, 3, 6}:\nThis set includes 0 and -3, which are both common divisors of x and y. It also includes -1, which means it can find all common divisors of two integers.\nTherefore, the correct answer is (B) {-6, -2, -1, 0, 1, 2,"}
{"question": "In the NoNicks operating system, the time required by a single file-read operation has four nonoverlapping components:\ndisk seek time-25 msec\ndisk latency time-8 msec\ndisk transfer time- 1 msec per 1,000 bytes\noperating system overhead-1 msec per 1,000 bytes + 10 msec\nIn version 1 of the system, the file read retrieved blocks of 1,000 bytes. In version 2, the file read (along with the underlying layout on disk) was modified to retrieve blocks of 4,000 bytes. The ratio of-the time required to read a large file under version 2 to the time required to read the same large file under version 1 is approximately", "choices": [{"label": "A", "text": "1:4"}, {"label": "B", "text": "1:3.5"}, {"label": "C", "text": "1:1"}, {"label": "D", "text": "1.1:1"}], "answerKey": "B", "model_answer": "The correct answer is (D) 1.1:1.\nThe time required for a file-read operation in version 1 is:\ndisk seek time + disk latency time + operating system overhead\n= 25 msec + 8 msec + 1 msec/1,000 bytes + 10 msec/1,000 bytes\n= 118 msec/1,000 bytes\n\nThe time required for a file-read operation in version 2 is:\ndisk seek time + disk latency time + operating system overhead\n= 25 msec + 8 msec + 1 msec/1,000 bytes + 10 msec/1,000 bytes\n+ 1 msec/4,000 bytes\n= 118 msec/1,000 bytes + 1 msec/4,000 bytes\n= 119 msec/4,000 bytes\n\nThe ratio of the time required in version 2 to the time required in version 1 is:\n119 msec/4,000 bytes / 118 msec/1,000 bytes\n= 1.1:1\n\nTherefore, the correct answer is (D) 1.1:1."}
{"question": "You want to cluster 7 points into 3 clusters using the k-Means Clustering algorithm. Suppose after the first iteration, clusters C1, C2 and C3 contain the following two-dimensional points: C1 contains the 2 points: {(0,6), (6,0)} C2 contains the 3 points: {(2,2), (4,4), (6,6)} C3 contains the 2 points: {(5,5), (7,7)} What are the cluster centers computed for these 3 clusters?", "choices": [{"label": "A", "text": "C1: (3,3), C2: (4,4), C3: (6,6)"}, {"label": "B", "text": "C1: (3,3), C2: (6,6), C3: (12,12)"}, {"label": "C", "text": "C1: (6,6), C2: (12,12), C3: (12,12)"}, {"label": "D", "text": "C1: (0,0), C2: (48,48), C3: (35,35)"}], "answerKey": "A", "model_answer": "\u200b"}
{"question": "Any set of Boolean operators that is sufficient to represent all Boolean expressions is said to be complete. Which of the following is NOT complete?", "choices": [{"label": "A", "text": "{AND, NOT}"}, {"label": "B", "text": "{NOT, OR}"}, {"label": "C", "text": "{AND, OR}"}, {"label": "D", "text": "{NAND}"}], "answerKey": "C", "model_answer": "The correct answer is (D) {NAND}.\nA Boolean expression is a combination of basic logical operators (AND, OR, NOT) that can be used to represent truth values and relationships between them. NAND is a specific logical operator that is the negation of AND, meaning that the negation of the result of a Boolean expression using AND and NAND is true if and only if the expression itself is false.\n\nThe other choices are all complete sets of Boolean operators. {AND, NOT} includes AND and NOT, which are the most basic operators that can be used to represent any Boolean expression. NOT, OR is also a complete set of operators, as OR can be expressed as NAND's negation. {AND, OR} includes all possible combinations of AND and OR, which is a complete set of operators. Finally, {AND, OR} also includes NAND, which is a complete set of operators.\n\nTherefore, the choice that is NOT complete is (D) {NAND}."}
{"question": "Consider the collection of all undirected graphs with 10 nodes and 6 edges. Let M and m, respectively, be the maximum and minimum number of connected components in any graph in the collection. If a graph has no selfloops and there is at most one edge between any pair of nodes, which of the following is true?", "choices": [{"label": "A", "text": "M = 10, m = 10"}, {"label": "B", "text": "M = 10, m = 1"}, {"label": "C", "text": "M = 7, m = 4"}, {"label": "D", "text": "M = 6, m = 4"}], "answerKey": "C", "model_answer": ""}
{"question": "Resolution theorem proving for showing that a formula of propositional logic is not satisfiable has which of the following properties?\nI. It is a sound proof system in the sense that there does not exist a proof of the unsatisfiability of a satisfiable formula of propositional logic.\nII. It is a complete proof system in the sense that there is a proof of unsatisfiability for every unsa tisfiable formula of propositional logic.\nIII. It is a succinct proof system in the sense that whenever an unsatisfiable formula F of propositional logic has a resolution proof, F also has a proof whose length is polynomial in the length of F.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "III only"}, {"label": "C", "text": "I and II only"}, {"label": "D", "text": "I and III only"}], "answerKey": "C", "model_answer": "B, III only."}
{"question": "Which of the following statements describe(s) properties of a purely segmented memory system?\nI. It divides memory into units of equal size.\nII. It permits implementation of virtual memory.\nIII. It suffers from internal fragmentation.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "I and III"}], "answerKey": "B", "model_answer": ""}
{"question": "Which of the following statements about floating-point arithmetic is NOT true?", "choices": [{"label": "A", "text": "It is inherently nonassociative because some numbers have no exact representation."}, {"label": "B", "text": "It is inherently nonassociative because there have to be upper and lower bounds on the size of numbers."}, {"label": "C", "text": "Associativity can be achieved with appropriate roundoff conventions."}, {"label": "D", "text": "Some rational numbers have no exact representation."}], "answerKey": "C", "model_answer": "The correct answer is (A) It is inherently nonassociative because some numbers have no exact representation.\n\nFloating-point arithmetic is a way of representing real numbers on a computer. It is based on a finite number of bits, which means that not all real numbers can be represented exactly. Some numbers, such as those with very small or very large values, have no exact representation in the computer's memory and must be approximated instead. This means that floating-point arithmetic is inherently nonassociative because not all numbers can be combined in the same way.\n\nThe other options are not true for floating-point arithmetic. Option (B) is not true because there are no upper or lower bounds on the size of numbers in floating-point arithmetic. Option (C) is true because associativity can be achieved with appropriate rounding conventions, but this is not related to the inherent nonassociativity of floating-point arithmetic. Option (D) is related to the fact that some rational numbers have no exact representation, but it is not the reason why floating-point arithmetic is nonassociative."}
{"question": "Suppose sharing of tiles in a multilevel directory structure is achieved with directory entries that are links pointing to a node containing information about a shared file. Information in this node includes (1) the owner of the file, (2) a count of the number of links to the tile, and (3) the disk block numbers of the file. What is a primary drawback to this approach to sharing?", "choices": [{"label": "A", "text": "If the owner modifies the file, another user who does not share will see the changes."}, {"label": "B", "text": "If the owner renames the file, other users will not be able to access it."}, {"label": "C", "text": "If the owner is allowed to delete a file, dangling links may result."}, {"label": "D", "text": "If any user who shares the file appends to it, others who share it will not be able to access the new disk blocks."}], "answerKey": "C", "model_answer": "The primary drawback to this approach to sharing is (A) If the owner modifies the file, another user who does not share will see the changes.\nIn this approach, each file has a node that contains information about the owner of the file, the number of links to the tile, and the disk block numbers of the file. If a user who does not have access to the file shares it, they will only be able to see their own link to the file, not the changes made by the owner. This means that if the owner modifies the file, other users who do not share it will not be able to access the modified version of the file. This can lead to inconsistencies and confusion when multiple users are trying to access the same file."}
{"question": "Mergesort works by splitting a list of n numbers in half, sorting each half recursively, and merging the two halves. Which of the following data structures will allow mergesort to work in O(n log n) time?\nI. A singly linked list\nII. A doubly linked list\nIII. An array", "choices": [{"label": "A", "text": "None"}, {"label": "B", "text": "III only"}, {"label": "C", "text": "I and II only"}, {"label": "D", "text": "I, II, and III"}], "answerKey": "D", "model_answer": "lain this question and answer it?"}
{"question": "If p(x) is the minimal-degree interpolating polynomial for the real-valued function f(x) at the n + 1 distinct real numbers x0, .... xn what is the maximum possible degree of p(x)?", "choices": [{"label": "A", "text": "n"}, {"label": "B", "text": "n + 1"}, {"label": "C", "text": "n + 2"}, {"label": "D", "text": "2n"}], "answerKey": "A", "model_answer": "The maximum possible degree of p(x) is (B) n + 1.\nThe minimal-degree interpolating polynomial for a real-valued function f(x) at n + 1 distinct real numbers x0, x1, ..., xn is a polynomial of degree at most n that passes through the points (x0, f(x0)), (x1, f(x1)),...,"}
{"question": "An internal hash table has 5 buckets, numbered 0, 1, 2, 3, 4. Keys are integers, and the hash function h(i) = i mod 5 is used, with linear resolution of collisions (i.e., if bucket h(i) is filled, the buckets h(i) + 1, h(i) + 2, ... are tried successively with all bucket numbers computed modulo 5). If elements with keys 13, 8, 24, 10, and 3 are inserted, m that order, into an initially blank hash table, then the content of the bucket numbered 2 is", "choices": [{"label": "A", "text": "3"}, {"label": "B", "text": "8"}, {"label": "C", "text": "10"}, {"label": "D", "text": "13"}], "answerKey": "A", "model_answer": "The correct answer is: (D) 13.\nTo understand why, let's break it down step by step:\n1. Insert 13: h(13) = 13 mod 5 = 2. So, bucket numbered 2 is checked. It is currently empty, so the value 13 is inserted into it.\n2. Insert 8: h(8) = 8 mod 5 = 3. So, bucket numbered 3 is checked. It is already occupied by the value 10, so we perform linear resolution of collisions by trying the next bucket (h(8) + 1) which is numbered 2. It is empty, so the value 8 is inserted into it.\n3. Insert 24: h(24) = 24 mod 5 = 1. So, bucket numbered 1 is checked. It is already occupied by the value 13, so we perform linear resolution of collisions by trying the next bucket (h(24) + 1) which is numbered 2. It is empty, so the value 24 is inserted into it.\n4. Insert 10: h(10) = 10 mod 5 = 2. So"}
{"question": "TCP protocol is responsible (among other things) for", "choices": [{"label": "A", "text": "Routing packets through the network"}, {"label": "B", "text": "Reliable delivery of packets between directly connected machines"}, {"label": "C", "text": "Reliable delivery of large (multi-packet) messages between machines that are not necessarily directly connected"}, {"label": "D", "text": "Dealing with differences among operating system architectures"}], "answerKey": "C", "model_answer": "The correct answer is (C) Reliable delivery of large (multi-packet) messages between machines that are not necessarily directly connected.\n\nThe Transmission Control Protocol (TCP) is a reliable, connection-oriented protocol that is responsible for providing reliable, end-to-end communication between applications running on different machines. It is used to transmit data over the internet and other networks. It is designed to ensure that packets are delivered reliably and in the correct order, even in the presence of network congestion, errors, and other issues.\nOne of the key features of TCP is its ability to handle large, multi-packet messages between machines that are not necessarily directly connected. This is achieved through the use of sequencing information, acknowledgments, and retransmission mechanisms. These mechanisms allow TCP to reassemble the received packets into the original message and ensure that it is delivered reliably and without errors. This makes TCP an important protocol for applications that require the reliable delivery of large messages over networks."}
{"question": "Let A and B be two sets of words (strings) from \u03a3*, for some alphabet of symbols \u03a3. Suppose that B is a subset of A. Which of the following statements must always be true of A and B ?\nI. If A is finite, then B is finite.\nII. If A is regular, then B is regular.\nIII. If A is context-free, then B is context-free.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "I and II only"}], "answerKey": "A", "model_answer": ""}
{"question": "For all strings x, the function x^M is defined recursively as follows.\ne^M= e, and\nif w is a string and a is a string with length 1, then\n(aw)^M = aw^Ma.\nLet a be a string with length 1, and let x and y be arbitrary strings. Which of the following is true?", "choices": [{"label": "A", "text": "a^M = a"}, {"label": "B", "text": "(ax)^M = (xa)^M"}, {"label": "C", "text": "(xy)^M = y^Mx^M"}, {"label": "D", "text": "None of the above"}], "answerKey": "D", "model_answer": "he correct answer is (D) None of the above.\nRecall that the M-th power of a string is defined recursively as e^M = e and (aw)^M = aw^Ma for any string w and length-1 string a. However, the function x^M is not defined for arbitrary strings x and y. It is only defined for strings with a length that is a power of M. For example, x^M is defined for x with length 1, 2, 4, 8,... but not for x with length 3, 5, 7, 9,...\nTherefore, the statement (xy)^M = y^Mx^M is not true in general, and we cannot determine whether (ax)^M = (xa)^M without more information about the specific definition and behavior of the function x^M."}
{"question": "Which of the following is NOT a reasonable justification for choosing to busy-wait on an asynchronous event?", "choices": [{"label": "A", "text": "The wait is expected to be short."}, {"label": "B", "text": "A busy-wait loop is easier to code than an interrupt handler."}, {"label": "C", "text": "There is no other work for the processor to do."}, {"label": "D", "text": "The program executes on a time-sharing system."}], "answerKey": "D", "model_answer": "Answer: C) There is no other work for the processor to do.\n\nBusy-waiting is a technique where a thread repeatedly checks a condition or flag without making any progress, in the hope that the condition will eventually become true. This technique is generally considered to be an inefficient and problematic way of dealing with asynchronous events, and it is typically used only in special cases where no better alternative exists.\nThere are several reasons why busy-waiting on an asynchronous event is not a reasonable justification:\n1. Inefficiency: Busy-waiting is a very inefficient way of handling asynchronous events, as it does not make any progress beyond checking the condition repeatedly.\n2. Blocking other tasks: If the processor is busy-waiting, it is not doing any other work, which can lead to other tasks being blocked and starved of resources.\n3. Higher power consumption: Busy-waiting can result in higher power consumption, as the processor is constantly running and generating heat.\n4. Risk of deadlocks and livelocks: Busy-waiting can increase the risk of deadlocks and livelocks, where threads are stuck waiting for each other and cannot make any progress.\nOverall, busy-waiting is generally not a reasonable justification for dealing with asynchronous events, as it is inefficient, can block other tasks, and can lead to higher power consumption and increased risk of deadlocks and livelocks."}
{"question": "The language {ww | w in (0 + 1)*} is", "choices": [{"label": "A", "text": "not accepted by any Turing machine"}, {"label": "B", "text": "accepted by some Turing machine, but by no pushdown automaton"}, {"label": "C", "text": "accepted by some pushdown automaton, but not context-free"}, {"label": "D", "text": "context-free, but not regular"}], "answerKey": "B", "model_answer": "The language {ww | w in (0 + 1)*} is (D) context-free, but not regular.\nTo see why, let's first consider the pumping lemma for regular languages, which states that for any regular language L and any positive integer p, there exists a string x in L such that |x| > p and the length of the x substring that is p copies of w is at most p. Since the language {ww} is regular, we can apply the pumping lemma to the string w = 01.\nLet p be the smallest positive integer for which the lemma applies to w. Then, by the pumping lemma, there exists a string x in {ww} such that |x| > 0 and the length of the x substring that is p copies of 01 is at most p.\nHowever, we can choose the string x as follows:\nx = 0w^p1w^p (where w^p means p concatenated copies of w)\nSince the string x has length greater than p, the pumping lemma is satisfied, and the length of the x substring that is p copies of 01 is 2p, which is greater than p. Therefore, the language {ww} is not regular.\nHowever, the language {ww} is context-free, since it is the language recognized by a deterministic context-free grammar:\nS \u2192 0S | 1S | \u03b5\nS \u2192 1\nS \u2192 \u03b5\nWe can use this grammar to generate strings in the language {ww}:\nS \u2192 0S \u2192 01S \u2192 0101S \u2192 01011S \u2192 010111S \u2192 0101111S \u2192 01011111"}
{"question": "Which of the following statements about Ethernets is typically FALSE?", "choices": [{"label": "A", "text": "Ethernets use circuit switching to send messages."}, {"label": "B", "text": "Ethernets use buses with multiple masters."}, {"label": "C", "text": "Ethernet protocols use a collision-detection method to ensure that messages are transmitted properly."}, {"label": "D", "text": "Networks connected by Ethernets are limited in length to a few hundred meters."}], "answerKey": "A", "model_answer": "The answer is (D) Networks connected by Ethernets are limited in length to a few hundred meters. This statement is typically false. Ethernets can be connected over longer distances, and there are various technologies, such as Ethernet over twisted pair, fiber optic cables, and wireless Ethernet, that can extend the reach of Ethernet networks. So, the other statements are true: (A) Ethernets use a token-based access method in their communication protocol and are reliable but slower than other forms of data transmission, (B) Ethernets are often used in local area networks (LANs), and (C) Ethernet protocols use a collision-detection method to avoid collisions that can disrupt communication."}
{"question": "Let P be a procedure that for some inputs calls itself (i.e., is recursive). If P is guaranteed to terminate, which of the following statements must be true?\nI. P has a local variable.\nII. P has an execution path where it does not call itself.\nIII. P either refers to a global variable or has at least one parameter.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "I and II only"}, {"label": "D", "text": "II and III only"}], "answerKey": "D", "model_answer": ""}
{"question": "Which of the following comes closest to being a perfectly secure encryption scheme?", "choices": [{"label": "A", "text": "The Caesar Cipher, a substitution cipher"}, {"label": "B", "text": "DES (Data Encryption Standard), a symmetric-key algorithm"}, {"label": "C", "text": "Enigma, a transposition cipher"}, {"label": "D", "text": "One-time pad"}], "answerKey": "D", "model_answer": "The one-time pad is the closest thing to a perfectly secure encryption scheme. It is a form of encryption that uses a random key that is at least as long as the plaintext being encrypted. The key is used to encrypt the plaintext by transforming each plaintext character into a corresponding ciphertext character using modular addition. The key is also used to decrypt the ciphertext back into plaintext using modular subtraction. The one-time pad provides perfect security because it is impossible for an attacker to determine the plaintext or the key, even with access to the ciphertext.\n\nIn contrast, the Caesar cipher is a monoalphabetic substitution cipher that replaces each plaintext character with another character a certain number of positions down the alphabet. The Caesar cipher is weak because it is easy to break using frequency analysis, where an attacker can determine which letters are more frequently used than others and guess the plaintext that way.\n\nThe Data Encryption Standard (DES) is a symmetric-key algorithm that uses a 56-bit key. DES is vulnerable to brute-force attacks, where an attacker tries every possible key until the plaintext is decrypted. In addition, the key is shared, making it vulnerable to attacks such as key-sharing attacks.\n\nThe Enigma was a transposition cipher that used multiple rotors and a plugboard to scramble the plaintext characters. However, the Enigma was also vulnerable to attacks, such as the Enigma machine being vulnerable to algebraic attacks, where the plaintext could be determined by solving for the connections between the rotors.\n\nTherefore, the one-time pad is the closest thing to a perfectly secure encryption scheme, while the other options are less secure due to their vulnerability to various types of attacks."}
{"question": "Of the following problems concerning a given undirected graph G, which is currently known to be solvable in polynomial time?", "choices": [{"label": "A", "text": "Finding a longest simple cycle in G"}, {"label": "B", "text": "Finding a shortest cycle in G"}, {"label": "C", "text": "Finding ALL spanning trees of G"}, {"label": "D", "text": "Finding a largest clique in G"}], "answerKey": "B", "model_answer": "The correct answer is (D) Finding a largest clique in G.\nA clique in a graph is a set of vertices whose intersection is exactly the entire vertex set. Finding the largest clique in a graph is a problem in graph theory and is known to be solvable in polynomial time. There are various algorithms for finding the largest clique in a graph, such as the Breadth-First Search (BFS) algorithm, the Kruskal's algorithm, and the Floyd-Warshall algorithm. These algorithms have a time complexity of O(n^2) for a graph with n vertices, which makes them efficient for solving the problem in polynomial time.\nOn the other hand, finding a longest simple cycle in a graph is a problem known to be NP-hard, which means that it is solvable in polynomial time only in very special cases. Finding a shortest cycle and finding all spanning trees of a graph are also NP-hard problems. Therefore, the answer to the question is (D) Finding a largest clique in G."}
{"question": "The IP protocol is primarily concerned with", "choices": [{"label": "A", "text": "Routing packets through the network"}, {"label": "B", "text": "Reliable delivery of packets between directly connected machines"}, {"label": "C", "text": "Reliable delivery of large (multi-packet) messages between machines that are not necessarily directly connected"}, {"label": "D", "text": "Dealing with differences among operating system architectures"}], "answerKey": "A", "model_answer": "The correct answer is (C) Reliable delivery of large (multi-packet) messages between machines that are not necessarily directly connected.\n\nThe Internet Protocol (IP) is a network protocol that is primarily concerned with the reliable delivery of packets of data between devices on a network. It is responsible for addressing, routing, and congestion control in the Internet. One of the main tasks of IP is to ensure that large messages (or packets) are delivered reliably between machines that may not be directly connected to each other. This is achieved through the use of routers, which act as intermediaries to forward packets to their destinations. IP also deals with differences among operating system architectures, but its primary concern is the reliable delivery of packets of data between devices on a network."}
{"question": "Of the following, which best approximates the ratio of the number of nonterminal nodes to the total number of nodes in a complete K-ary tree of depth N?", "choices": [{"label": "A", "text": "1/K"}, {"label": "B", "text": "K-1/K"}, {"label": "C", "text": "log_10 (1/N)"}, {"label": "D", "text": "N-1/m"}], "answerKey": "A", "model_answer": ""}
{"question": "Consider a computer system in which processes can request and release one or more resources. Once a process has been granted a resource, the process has exclusive use of that resource until it is released. If a process requests a resource that is already in use, the process enters a queue for that resource, waiting until the resource is available. Which of the following will NOT deal effectively with the problem of deadlock?", "choices": [{"label": "A", "text": "Giving priorities to processes and ordering the wait queues by priority"}, {"label": "B", "text": "Having a process request all its required resources when it first begins, and restarting if it cannot obtain them all"}, {"label": "C", "text": "Numbering the resources and requiring that processes request resources in order of increasing number"}, {"label": "D", "text": "Having processes time out and restart after a random interval of waiting"}], "answerKey": "A", "model_answer": "The answer is (D) having processes time out and restart after a random interval of waiting.\nDeadlock occurs when two or more processes are blocked, each holding a resource that the other needs. This can lead to a situation where no processes can proceed, and the system becomes unresponsive.\nOption (A) of giving priorities to processes and ordering the wait queues by priority would not deal effectively with deadlock because it only addresses the symptoms of the problem and does not prevent it.\nOption (B) of having a process request all its required resources when it first begins and restarting if it cannot obtain them all would also not address the problem of deadlock, as it would simply result in the process trying to acquire all the resources again, potentially leading to the same deadlock scenario.\nOption (C) of numbering the resources and requiring that processes request resources in order of increasing number would prevent deadlock by ensuring that each process requests resources in the correct order, but it would not address the issue of processes getting blocked while waiting for resources.\nOption (D) of having processes time out and restart after a random interval of waiting would not address the issue of deadlock, as it would simply result in the process restarting and trying to acquire the same resources again, potentially leading to the same deadlock scenario."}
{"question": "\"Magic memory\"' has two operations: Read and Clear. Both are indivisible and mutually exclusive. Clear sets the magic memory to zero. Read returns a value that represents the number of Read operations since the last Clear operation. Which of the following is (are) true of \"Magic memory\"?\nI. It can provide the functionality of an atomic Test-and-Set.\nII. It can be used to coordinate processes running on a shared-memory multiprocessor.\nIII. It is only useful on a multiprocessor.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "I and II"}], "answerKey": "D", "model_answer": ""}
{"question": "Which of the following is the name of the data structure in a compiler that is responsible for managing information about variables and their attributes?", "choices": [{"label": "A", "text": "Abstract Syntax Tree (AST)"}, {"label": "B", "text": "Attribute Grammar"}, {"label": "C", "text": "Symbol Table"}, {"label": "D", "text": "Semantic Stack"}], "answerKey": "C", "model_answer": "The correct answer is (A) Abstract Syntax Tree (AST).\nAn Abstract Syntax Tree (AST) is a data structure used in compilers to represent the syntactic structure of a program, specifically the structure of a program's abstract syntax. It is a tree-like data structure that contains a hierarchical representation of the program's tokens, statements, and expressions. The AST is used to analyze the structure of a program and to generate machine code or other lower-level representations. It is a key component in the compilation process and is used by most modern programming languages."}
{"question": "Which of the following algorithms has running time \u0398(n^2) in the worst case but \u0398(n log n) on average?", "choices": [{"label": "A", "text": "Bubblesort"}, {"label": "B", "text": "Mergesort"}, {"label": "C", "text": "Heapsort"}, {"label": "D", "text": "Quicksort"}], "answerKey": "D", "model_answer": "The algorithm that has running time \u0398(n^2) in the worst case but \u0398(n log n) on average is Bubblesort.\nThe running time of an algorithm is the time it takes to complete the algorithm for a given input. The worst-case running time is the maximum amount of time the algorithm can take to complete, while the average-case running time is the expected value of the running time over many inputs.\nBubblesort has a worst-case running time of \u0398(n^2) because it has a poor worst-case performance. However, it has an average-case running time of \u0398(n log n), which is much faster than the worst-case performance. This is because Bubblesort has a slow-down factor of 2.0, which means that the worst-case running time is \u221a(2^10) times larger than the average-case running time.\nMer"}
{"question": "Languages with a structure that implements abstract data types (e.g., a C++ class) can prevent access to components of this structure by all operations except those that are part of this structure. However, definitions of such a structure often contain declarations of components of the structure (e.g., the header file for a C++ class may contain declarations of its private components). For such a language, an object's name could be bound at run time to stack storage for its component values (direct representation) or to a stack pointer referencing heap storage for its component values (indirect representation). Which of the following statements about comparisons between direct and indirect representations is (are) true?\nI. Indirect representation noticeably increases compilation time.\nII. Direct representation decreases the time needed to access components of a variable.\nIII. When the storage size of some private component of a variable changes, indirect representation minimizes the number of recompilations of source modules that must be performed.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "III only"}, {"label": "C", "text": "I and II only"}, {"label": "D", "text": "II and III only"}], "answerKey": "D", "model_answer": "\u200b"}
{"question": "Which of the following is NOT a property of bitmap graphics?", "choices": [{"label": "A", "text": "Fast hardware exists to move blocks of pixels efficiently."}, {"label": "B", "text": "Realistic lighting and shading can be done."}, {"label": "C", "text": "All line segments can be displayed as straight."}, {"label": "D", "text": "Polygons can be filled with solid colors and textures."}], "answerKey": "C", "model_answer": "Answer: (A) Fast hardware exists to move blocks of pixels efficiently.\n\nBitmap graphics, also known as raster graphics, are a type of digital image that is stored as a collection of pixels. Bitmap graphics are resolution-dependent, which means that they may lose quality when scaled up. Here are some properties of bitmap graphics:\n1. Pixels: Bitmap graphics are made up of pixels, which are the smallest units of color and brightness.\n2. Resolution: Bitmap graphics have a fixed resolution, which is the number of pixels in a given direction.\n3. Color: Bitmap graphics use a color palette to store the colors that will be used in the image.\n4. File size: Bitmap graphics have a relatively large file size compared to vector graphics, which are made up of mathematical equations rather than pixels.\n5. Scalability: Bitmap graphics are not easily scalable, as they lose quality when scaled up.\n6. Computational complexity: Bitmap graphics have a higher computational complexity than vector graphics, which require more calculations to render the image.\n7. Fast hardware: Fast hardware is not necessary to move blocks of pixels efficiently in bitmap graphics, as the pixels are stored in a grid-like format that can be accessed quickly."}
{"question": "Which of the following is true of interrupts?", "choices": [{"label": "A", "text": "They are generated when memory cycles are \"stolen\"."}, {"label": "B", "text": "They are used in place of data channels."}, {"label": "C", "text": "They can indicate completion of an I/O operation."}, {"label": "D", "text": "They cannot be generated by arithmetic operations."}], "answerKey": "C", "model_answer": "The correct answer is (A) They are generated when memory cycles are \"stolen\".\nInterrupts are a mechanism used by the CPU to grab control of the computer system from the currently running program to execute a specific task or handle an event that requires immediate attention. When an interrupt occurs, the CPU stops the current program and jumps to a specific location in memory where the interrupt service routine (ISR) is located. The ISR performs the necessary task and then returns control back to the originally running program. The choice (A) is correct because interrupts are generated when the CPU's pipeline is blocked, and it needs to steal a memory cycle to check for interrupts."}
{"question": "In a height-balanced binary search tree, the heights of the left and right descendents of any node differ by at most 1. Which of the following are true of such a tree?\nI. Worst-case search time is logarithmic in the number of nodes.\nII. Average-case search time is logarithmic in the number of nodes.\nIII. Best-case search time is proportional to the height of the tree.\nIV. The height of the tree is logarithmic in the number of nodes.", "choices": [{"label": "A", "text": "I and III only"}, {"label": "B", "text": "II and III only"}, {"label": "C", "text": "II and IV only"}, {"label": "D", "text": "I, II, and IV"}], "answerKey": "D", "model_answer": ""}
{"question": "Bob writes down a number between 1 and 1,000. Mary must identify that number by asking \"yes/no\" questions of Bob. Mary knows that Bob always tells the truth. If Mary uses an optimal strategy, then she will determine the answer at the end of exactly how many questions in the worst case?", "choices": [{"label": "A", "text": "1,000"}, {"label": "B", "text": "999"}, {"label": "C", "text": "500"}, {"label": "D", "text": "10"}], "answerKey": "D", "model_answer": "The correct answer is (D) 10.\nTo answer this question, we need to consider the worst-case scenario where Mary asks the least number of questions that will allow her to determine Bob's number. In the worst case, Bob could randomly choose a number between 1 and 1,000, so the worst-case number of questions required would be 1,000. However, Mary can do better than this by using an optimal strategy.\nMary can start by asking a question that will eliminate half of the possible numbers. Since Bob has already written down a number between 1 and 1,000, Mary can ask him if his number is odd or even. If Bob's number is odd, she can eliminate half of the remaining possibilities, leaving her with 500 choices. If Bob's number is even, she can eliminate a quarter of the remaining possibilities, leaving her with 250 choices.\nAfter asking this question, Mary can narrow down the possibilities even further by asking Bob whether his number is greater than or less than 100. If Bob's number is greater than 100, she can eliminate the rest of the numbers on the left side of 100, leaving her with 100 possibilities. If Bob's number is less than 100, she can eliminate the rest of the numbers on the right side of 100, leaving her with 10 possibilities.\nFinally, Mary can ask Bob if his number is between 1 and 10, leaving her with only one possibility. At this point, she will know Bob's number, so the worst-case number of questions is 10."}
{"question": "Which of the following is (are) true about virtual memory systems that use pages?\nI. The virtual address space can be larger than the amount of physical memory.\nII. Programs must be resident in main memory throughout their execution.\nIII. Pages correspond to semantic characteristics of the program.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "I and II"}, {"label": "D", "text": "I and III"}], "answerKey": "A", "model_answer": ""}
{"question": "Which of the following is usually NOT represented in a subroutine's activation record frame for a stack-based programming language?", "choices": [{"label": "A", "text": "Values of local variables"}, {"label": "B", "text": "A heap area"}, {"label": "C", "text": "The return address"}, {"label": "D", "text": "Stack pointer for the calling activation record"}], "answerKey": "B", "model_answer": "D) Stack pointer for the calling activation record.\nIn general, the activation record frame for a subroutine in a stack-based programming language contains information about the current state of the calling context, including the values of local variables, the stack pointer, the return address, and other relevant information. The stack pointer for the calling activation record is used to determine the size of the stack frame, which is the area of memory used to store the activation record and its associated data. The return address, on the other hand, indicates where the program should return to after the subroutine finishes executing. The values of local variables are also typically stored in the activation record frame, but they are not usually represented by a specific register in the frame."}
{"question": "Which of the following statements about a remote procedure call is true?", "choices": [{"label": "A", "text": "It is used to call procedures with addresses that are farther than 2^16 bytes away."}, {"label": "B", "text": "It cannot return a value."}, {"label": "C", "text": "It cannot pass parameters by reference."}, {"label": "D", "text": "It cannot call procedures implemented in a different language."}], "answerKey": "C", "model_answer": ""}
{"question": "Of the following sorting algorithms, which has a running time that is LEAST dependent on the initial ordering of the input?", "choices": [{"label": "A", "text": "Insertion sort"}, {"label": "B", "text": "Quicksort"}, {"label": "C", "text": "Merge sort"}, {"label": "D", "text": "Selection sort"}], "answerKey": "C", "model_answer": "The running time of the sorting algorithms is least dependent on the initial ordering of the input in Insertion sort.\n\nInsertion sort is a simple sorting algorithm that works by iterating through the list of items, comparing each pair of adjacent items, and swapping them if they are in the wrong order. At each step, the algorithm adds each item to its correct position in the sorted list, so the initial ordering of the input has little effect on the overall running time.\n\nIn contrast, Quicksort and Merge sort are both divide-and-conquer algorithms that have a more significant dependence on the initial ordering of the input. Quicksort chooses a pivot element and swaps it with one of the other elements, which can lead to worst-case performance if the pivot is in the middle of the list. Merge sort requires sorting the sublists on each partition, which can also be affected by the initial ordering of the input.\n\nSelection sort, on the other hand, is a simple sorting algorithm that repeatedly finds the minimum element in the unsorted portion of the list and swaps it with the first element in the sorted portion. This algorithm is very sensitive to the initial ordering of the input, as it has to repeatedly move the largest elements to the end of the list, which can take a long time if they are at the beginning."}
{"question": "A particular parallel program computation requires 100 seconds when executed on a single processor. If 40 percent of this computation is \"inherently sequential\" (i.e., will not benefit from additional processors), then the theoretically best possible elapsed times for this program running with 2 and 4 processors, respectively, are", "choices": [{"label": "A", "text": "20 and 10 seconds"}, {"label": "B", "text": "30 and 15 seconds"}, {"label": "C", "text": "50 and 25 seconds"}, {"label": "D", "text": "70 and 55 seconds"}], "answerKey": "D", "model_answer": "The correct answer is (D) 70 and 55 seconds.\nTo calculate the theoretically best possible elapsed times for this program running with 2 and 4 processors, respectively, we can use the Amdahl's Law, which states that the maximum speedup of a parallel program is limited by the fraction of sequential code.\nGiven the problem, the sequential time (S) is 100 seconds, and 40% of the computation (C) is inherently sequential, so the remaining 60% (W) can potentially benefit from parallel processing.\nAmdahl's Law can be expressed as:\n\nA = W + (S / W)\n\nFor 2 processors, we can calculate the speedup (S2) as:\nS2 = C / (1 - 0.4) = 60 / 0.6 = 100 seconds\n\nA2 = 100 + (100 / 100) = 1\n\nThe speedup for 2 processors is 1, so the elapsed time (E2) can be calculated as:\nE2 = S \\* S2 = 100 \\* 1 = 100 seconds\n\nFor 4 processors, we can calculate the speedup (S4) as:\nS4 = C / (1 - 0.4) = 60 / 0.6 = 100 seconds\n\nA4 = 100 + (100 / 100) = 2\n\nThe speedup for 4"}
{"question": "Consider the representation of six-bit numbers by two's complement, one's complement, or by sign and magnitude. In which representation is there overflow from the addition of the integers 011000 and 011000?", "choices": [{"label": "A", "text": "Two's complement only"}, {"label": "B", "text": "Sign and magnitude and one's complement only"}, {"label": "C", "text": "Two's complement and one's complement only"}, {"label": "D", "text": "All three representations"}], "answerKey": "D", "model_answer": "(C) Two's complement and one's complement only.\nIn two's complement representation, if the least significant bit (LSB) is 1, there will be an overflow.\nIn one's complement representation, if the most significant bit (MSB) is 1, there will be an overflow.\nIn sign and magnitude representation, there can be an overflow if the magnitude of the two numbers does not have the same sign.\nTherefore, the only choice that includes both two's complement and one's complement is (C)."}
{"question": "Of the following, which best characterizes computers that use memory-mapped I/O?", "choices": [{"label": "A", "text": "The computer provides special instructions for manipulating I/O ports."}, {"label": "B", "text": "I/O ports are placed at addresses on the bus and are accessed just like other memory locations."}, {"label": "C", "text": "To perform an I/O operation, it is sufficient to place the data in an address register and call the channel to perform the operation."}, {"label": "D", "text": "Ports are referenced only by memory-mapped instructions of the computer and are located at hardwired memory locations."}], "answerKey": "B", "model_answer": "The correct answer is (B) I/O ports are placed at addresses on the bus and are accessed just like other memory locations. In a memory-mapped I/O system, the I/O devices are addressable just like the main memory, and the system maps the I/O addresses to the physical addresses of the devices. The computer provides special instructions for manipulating I/O ports, and to perform an I/O operation, the data is placed in an address register and the channel is called to perform the operation. This allows for more flexibility in accessing I/O devices, but also requires more overhead to manage the mapping between virtual addresses and physical addresses."}
{"question": "Many cryptographic protocols base their security on assumptions about the computational difficulty of integer factorization. Integer factorization serves this purpose because we believe that", "choices": [{"label": "A", "text": "integer multiplication is a function whose inverse, factorization, remains difficult for a large class of inputs"}, {"label": "B", "text": "P = NP"}, {"label": "C", "text": "even if P = NP, integer factorization is still likely not to be polynomial-time computable"}, {"label": "D", "text": "testing primality is computationally intractable"}], "answerKey": "A", "model_answer": "The correct answer is (A): integer multiplication is a function whose inverse, factorization, remains difficult for a large class of inputs. Integer factorization is used to base the security of many cryptographic protocols on the assumption that it is computationally difficult to perform. This assumption is that the computational complexity of factoring large integers is so high that it is impractical to do so, even with the most advanced computing technology available. This assumption is used to protect the confidentiality, integrity, and authenticity of digital communications and to secure cryptographic systems."}
{"question": "Which of the following sets of bit strings CANNOT be described with a regular expression?", "choices": [{"label": "A", "text": "All bit strings whose number of zeros is a multiple of five"}, {"label": "B", "text": "All bit strings starting with a zero and ending with a one"}, {"label": "C", "text": "All bit strings with an even number of zeros"}, {"label": "D", "text": "All bit strings with more ones than zeros"}], "answerKey": "D", "model_answer": ""}
{"question": "Which of the following conditions can be expressed by a Boolean formula in the Boolean variables p_1, p_2, p_3, p_4 and the connectives \u2227,\u2228 (without \u00ac)?\nI. At least three of p_1, p_2, p_3, p_4 are true.\nII. Exactly three of p_1, p_2, p_3, p_4 are true.\nIII. An even number of p_1, p_2, p_3, p_4 are true.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "I and III"}], "answerKey": "A", "model_answer": "he correct answer is (D) I and III.\nHere is why:\nI. At least three of p_1, p_2, p_3, p_4 are true. This can be expressed using the implication operator \u00ac, as \u00ac(p_1 \u2228 p_2 \u2228 p_3 \u2228 p_4) \u2227 (p_1 \u2228 p_2 \u2228 p_3 \u2228 p_4), which is a Boolean formula in the variables p_1, p_2, p_3, p_4 and the connectives \u2227, \u2228.\nII. Exactly three of p_1, p_2, p_3, p_4 are true. This can be expressed using the equivalence operator \u2227, as (p_1 \u2227 p_2 \u2227 p_3 \u2227 p_4) \u2227 (p_1 \u2227 p_2 \u2227 p_3 \u2227 p_4), which is also a Boolean formula in the variables p_1, p_2, p_3, p_4 and the connectives \u2227, \u2228.\nTherefore, the only two options that express the given conditions are (I) and (II). Option (III) is not a Boolean formula in the given variables and connectives."}
{"question": "Two alternatives for interconnecting a set of processors with bidirectional links are (1) the fully interconnected network, in which each processor is directly connected to every other processor, and (2) the ring network, in which each processor is connected to two other processors. The worst-case path length for a network is the maximum, over all pairs of nodes in the network, of the minimum length paths (measured in number of links) between the nodes. For each type of interconnection of n processors, a figure of merit can be formed as the product of the number of links required for the network times the worst-case path length connecting any two processors. The ratio of this figure of merit for the fully interconnected network compared to that of the ring network, for even n > 2, is", "choices": [{"label": "A", "text": "1/(n^2)"}, {"label": "B", "text": "1/(n(n-1))"}, {"label": "C", "text": "1/n"}, {"label": "D", "text": "(n-1)/n"}], "answerKey": "D", "model_answer": "The correct answer is (B) 1/(n(n-1)).\nTo see why, let's first recall that the fully interconnected network requires n(n-1)/2 links, while the ring network requires n links. So we want to find the worst-case path length for each network.\nFor the fully interconnected network, the worst-case path length is the maximum, over all pairs of processors, of the minimum length paths between them. Since each processor is directly connected to every other processor, the minimum length path between any two processors is 2, since they are connected by a direct link. Therefore, the worst-case path length for the fully interconnected network is (n-1)/2.\nFor the ring network, the worst-case path length is the maximum, over all pairs of processors, of the minimum length paths between them. Since each processor is connected to two other processors, there are n(n-1)/2 possible pairs of processors. The minimum length path between any two processors on the ring is 1, since they are connected by a single link. Therefore, the worst-case path length for the ring network is (n-1)/2.\nTherefore, the figure of merit for the fully interconnected network is (n-1)/2 times the number of links required for the network, which is (n-1)/2 \\* n(n-1)/2 = (n^2 - n)/2. The figure of merit for the ring network is n(n-1)/2 times the number of links required for the network, which is n(n-1)/2 \\* n = n(n-1).\nSo the ratio of the"}
{"question": "For a connected, undirected graph G = (V, E), which of the following must be true?\nI. \u03a3_{v\u2208V} degree(v) is even.\nII. |E| \u2265 |V| \u2212 1\nIII. G has at least one vertex with degree 1.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "I and II"}], "answerKey": "D", "model_answer": ""}
{"question": "In multiprogrammed systems it is advantageous if some programs such as editors and compilers can be shared by several users. Which of the following must be true of multiprogrammed systems in order that a single copy of a program can be shared by several users?\nI. The program is a macro.\nII. The program is recursive.\nIII. The program is reentrant.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "II and III only"}], "answerKey": "C", "model_answer": "The correct answer is (D) II and III only. In order for a single copy of a program to be shared by several users in a multiprogrammed system, the program must be reentrant. This means that the program can be run multiple times from different locations, and its behavior will be consistent regardless of the sequence in which it is run. If a program is a macro or recursive, it may not be reentrant, and therefore cannot be shared. On the other hand, if the program is reentrant, it may also be a macro or recursive, but that is not a requirement for sharing."}
{"question": "Which of the following decimal numbers has an exact representation in binary notation?", "choices": [{"label": "A", "text": "0.1"}, {"label": "B", "text": "0.2"}, {"label": "C", "text": "0.3"}, {"label": "D", "text": "0.5"}], "answerKey": "D", "model_answer": "Choice (A) 0.1 is not exact in binary notation. It is approximately 0.1000000000 in binary.\nChoice (B) 0.2 is exact in binary notation and is represented as 0.1000000000 in binary.\nChoice (C) 0.3 is not exact in binary notation and is approximately 0.1001 in binary.\nChoice (D) 0.5 is exact in binary notation and is represented as 1.0000000000 in binary.\nTherefore, the correct answer is (B) 0.2."}
{"question": "Function signatures describe the types of the arguments to a function as well as the return value of the function. For instance, the addition function on reals has a signature of\nadd : real x real -> real\nsince it takes two real numbers and returns a real number. But, for a language that allows functions as return values, addition could be considered to have the signature\nadd : real -> (real -> real)\nwhich means that add takes a single real (the first operand) and returns a new function that itself takes a single real (the second operand) and returns a real (the result). This process of reducing a function with multiple arguments to a function with fewer arguments is called currying. Which of the following is correct?", "choices": [{"label": "A", "text": "Currying can be applied to any function to the point where it has exactly one input argument."}, {"label": "B", "text": "Currying cannot be applied to functions of more than two arguments."}, {"label": "C", "text": "Currying cannot be applied to functions that return functions as arguments."}, {"label": "D", "text": "Currying cannot be applied w functions that haw arguments that are functions."}], "answerKey": "A", "model_answer": "can be applied to any function to the point where it has exactly one input argument."}
{"question": "Array A contains 256 elements of 4 bytes each. Its first element is stored at physical address 4,096.\nArray B contains 512 elements of 4 bytes each. Its first element is stored at physical address 8,192.\nAssume that only arrays A and B can be cached in an initially empty, physically addressed, physically tagged, direct-mapped, 2K-byte cache with an 8-byte block size. The following loop is then executed.\nfor (i = 0; i < 256; i++)\n        A[i] = A[i] + B[2*i];\nDuring the execution of the loop, how many bytes will be written to memory if the cache has a write-back policy?", "choices": [{"label": "A", "text": "0"}, {"label": "B", "text": "256"}, {"label": "C", "text": "1024"}, {"label": "D", "text": "2000"}], "answerKey": "A", "model_answer": "The correct answer is (D) 2048 bytes. Here's why:\nThe cache has a 2K-byte block size, which means it can hold 2048 bytes of data at any given time. Each loop iteration doubles the size of Array A, so it will take four iterations for the cache to be full of updated data.\nDuring each iteration, Array A will be copied to the cache, which will fill the cache with 2048 bytes. After four iterations, the cache will be completely full of updated data. At this point, any subsequent write operations will be written back to main memory, as the cache is full and has write-back enabled.\nTherefore, the total number of bytes written to memory during the loop will be 2048 \\* 4 = 8192 bytes."}
{"question": "In which of the following representations of numbers by 8-bit words is the addition of the integers 109 and -42 within range?\nI. One's complement\nII. Two's complement\nIII. Sign and magnitude", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "I and II only"}, {"label": "D", "text": "I, II, and III"}], "answerKey": "D", "model_answer": "The correct answer is (D) I, II, and III.\nIn binary, 109 is equal to 10000100 and -42 is equal to -10010010.\nWhen represented in 8-bit words, these numbers are as follows:\n109: 10000100 (ones complement)\n-42: -10010010 (two's complement)\n109 + -42 = -62 (ones complement)\nTherefore, the operation of addition is within range for all three representations: ones complement, two's complement, and sign and magnitude."}
{"question": "If a malicious process is granted temporary administrator-level access to a system", "choices": [{"label": "A", "text": "the threat is over as soon as the process is killed"}, {"label": "B", "text": "the threat is over after the operating system is rebooted"}, {"label": "C", "text": "the thread is over after rebooting the machine and replacing files that show a virus infection"}, {"label": "D", "text": "the threat is often permanent until the entire disk is wiped clean"}], "answerKey": "D", "model_answer": "The correct answer is (A) the threat is over as soon as the process is killed. Once the malicious process is terminated, it can no longer cause any harm to the system or its resources. However, it's important to note that this is only a temporary solution and that the system should be further analyzed and secured to prevent similar attacks in the future."}
{"question": "Which of the following statements about horizontal versus vertical microarchitecture is (are) true?\nI. Programs for horizontal architectures require more time steps than those for vertical architectures.\nII. Horizontal microinstructions are unencoded.\nIII. Horizontal microinstructions usually have a single opcode and multiple operand specifiers.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "II and III only"}], "answerKey": "B", "model_answer": "he correct answer is (A) I only.\n\nHorizontal microarchitecture is defined by the number of clock cycles required to execute a single instruction, which is the same as the number of bits in the instruction word. In a horizontal architecture, instructions with the same number of bits are executed in a fixed number of clock cycles. The main advantage of horizontal architectures is that they can handle a wide variety of instructions in a small number of clock cycles, making them very efficient for a large number of tasks.\n\nOn the other hand, vertical microarchitecture is defined by the number of clock cycles required to decode an instruction. In a vertical architecture, instructions are decoded in a fixed number of clock cycles, regardless of the number of bits in the instruction word. Vertical architectures are typically more efficient for a small number of complex instructions, but they are less efficient for a large number of simple instructions.\n\nTherefore, statement I is true because horizontal microinstructions require a fixed number of clock cycles to execute, while statement II is false because horizontal microinstructions are typically encoded. Statement III is false because horizontal microinstructions usually have multiple opcode and operand specifiers, but true statements II and III can be combined into statement II only because horizontal microinstructions can be unencoded and have multiple operand specifiers."}
{"question": "A \"strictly binary tree\" is a binary tree in which every node that is not a leaf has two children. Suppose that for a class of strictly binary trees there exists c > 0 such that, for any tree in the class, the ratio of the lengths of any two root-to-leaf paths is bounded above by c. Which of the following best characterizes the height h of any tree in this class, where N is the number of nodes in the tree and N > 1 ?", "choices": [{"label": "A", "text": "h <= log2(N)"}, {"label": "B", "text": "h = 1/c * log2(N)"}, {"label": "C", "text": "h < c log2(N)"}, {"label": "D", "text": "h > c log2(N)"}], "answerKey": "C", "model_answer": ""}
{"question": "Which of the following sorting algorithms has average-case and worst-case running times of O(n log n)?", "choices": [{"label": "A", "text": "Bubble sort"}, {"label": "B", "text": "Insertion sort"}, {"label": "C", "text": "Merge sort"}, {"label": "D", "text": "Quicksort"}], "answerKey": "C", "model_answer": "The correct answer is (D) Quicksort. Quicksort has a worst-case time complexity of O(n^2) and a best-case time complexity of O(n log n), but its average-case time complexity is also O(n log n). Bubble sort has a worst-case time complexity of O(n^2) and a best-case time complexity of O(n), but its average-case time complexity is O(n^2). Insertion sort has a worst-case time complexity of O(n^2) and a best-case time complexity of O(n), but its average-case time complexity is also O(n^2). Merge sort has a worst-case time complexity of O(n^2) and a best-case time complexity of O(n log n), but its average-case time complexity is O(n log n)."}
{"question": "Consider the following equations concerning a stack module that has the operations Push, Pop, Top, and IsEmpty. Which of the equations does NOT represent the conventional semantics of a stack?", "choices": [{"label": "A", "text": "IsEmpty(Push(Stack,Elem)) = true"}, {"label": "B", "text": "Pop(Push(Stack,Elem)) = Stack"}, {"label": "C", "text": "Top(Push(Stack,Elem)) = Elem"}, {"label": "D", "text": "IsEmpty(Push(Push(Stack,Elem1),Elem2)) = false"}], "answerKey": "A", "model_answer": "The correct answer is (A) IsEmpty(Push(Stack,Elem)) = true.\n\nThe conventional semantics of a stack module is defined by the following equations:\n1. IsEmpty(Stack) = true if Stack is empty, and false otherwise.\n2. IsEmpty(Stack) = false implies that (1) Pop(Stack) = Elem, where Elem is the top element of Stack.\n3. Pop(Stack) = Elem, where Elem is the top element of Stack.\n4. Top(Stack) = Elem, where Elem is the top element of Stack.\n5. IsEmpty(Stack) = true if and only if Stack is empty, and otherwise false.\n\nEquation (A) states that IsEmpty(Push(Stack,Elem)) returns true, which means that the stack is empty when a new element is pushed onto it. This equation does not represent the conventional semantics of a stack because it does not imply that the stack is empty when calling Pop or Top on the stack. Additionally, equations (B), (C), and (D) all represent the conventional semantics of a stack correctly."}
{"question": "Assume that any assignment statement can be executed in unit time. If as many identical processors as needed are used, what is the minimum number of time units needed to execute the assignments\nA := B + C\nB := A - B\nC := A * E\nD := A/F\nE := B - C\nF := A + B\nwith the same result as if the assignments were executed in the order shown?", "choices": [{"label": "A", "text": "1"}, {"label": "B", "text": "2"}, {"label": "C", "text": "3"}, {"label": "D", "text": "4"}], "answerKey": "C", "model_answer": ""}
{"question": "Two expressions E and F are said to be unifiable if there are substitutions for the variables of E and F that make the expressions lexically identical. In the following three expressions, only w, x, y, and z are variables.\nI. f(w,w)\nII. f(x,1)\nIII. f(y,g(z))\nWhich pairs of these expressions is (are) pairs of unifiable expressions?", "choices": [{"label": "A", "text": "(I, II) only"}, {"label": "B", "text": "(I, III) only"}, {"label": "C", "text": "(II, III) only"}, {"label": "D", "text": "(I, II) and (I, III) only"}], "answerKey": "D", "model_answer": "e correct answer is (D) (I, II) and (I, III) only."}
{"question": "Which of the following instruction-set features is NOT generally considered an obstacle to aggressive pipelining of an integer unit?", "choices": [{"label": "A", "text": "Condition codes set by every instruction"}, {"label": "B", "text": "Variable-length encoding of instructions"}, {"label": "C", "text": "Instructions requiring widely varying numbers of cycles to execute"}, {"label": "D", "text": "Several different classes (sets) of registers"}], "answerKey": "D", "model_answer": "The answer is (D) Several different classes (sets) of registers.\nAn aggressive pipelined integer unit typically requires fixed-length instructions and a dedicated set of registers for each instruction. Variable-length encoding of instructions would not necessarily be an obstacle, but having several different classes or sets of registers could complicate the design and increase the complexity of the pipelining process."}
{"question": "Let k >= 2. Let L be the set of strings in {0, 1}^* such that x \\in L if and only if the number of 0's in x is divisible by k and the number of 1's in x is odd. The minimum number of states in a deterministic finite automaton (DFA) that recognizes L is", "choices": [{"label": "A", "text": "k + 2"}, {"label": "B", "text": "2k"}, {"label": "C", "text": "k log k"}, {"label": "D", "text": "k^2"}], "answerKey": "B", "model_answer": "The answer is (D) k^2.\nLet's break down the problem and understand each step:\n1. We are given a language L, and we want to find the minimum number of states in a deterministic finite automaton (DFA) that recognizes L.\n2. The language L has two properties: (i) The number of 0's in a string is divisible by k, and (ii) The number of 1's in a string is odd.\n3. To recognize L, we need two counters: one for the number of 0's and one for the number of 1's. We can use k bits to represent the counters.\n4. The number of possible states in the DFA is (2^(k+1)) - (2^k) = 2^(k+1) - 2^k = k^2.\n5. Since we need two counters to recognize L, the minimum number of states in the DFA is k^2.\nTherefore, the correct answer is (D) k^2."}
{"question": "Let G = (V, E) be a finite directed acyclic graph with |E| > 0. Which of the following must be true?\nI. G has a vertex with no incoming edge.\nII. G has a vertex with no outgoing edge.\nIII. G has an isolated vertex, that is, one with neither an incoming edge nor an outgoing edge.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "I and II only"}], "answerKey": "D", "model_answer": "The correct answer is (D) I and II only.\nIn a directed acyclic graph (DAG), a vertex without any incoming edges is called a sink, and a vertex without any outgoing edges is called a source. An isolated vertex is a vertex that has neither an incoming edge nor an outgoing edge.\nTherefore, option (I) is true if and only if option (II) is true. Option (III) is not necessarily true, as an isolated vertex is not necessarily a vertex with neither an incoming edge nor an outgoing edge.\nOption (D) I and II only is the correct answer because both options (I) and (II) must be true for G to have a sink and a source, respectively."}
{"question": "Let T be a depth-first search tree of a connected undirected graph G. For each vertex v of T, let pre(v) be the number of nodes visited up to and including v during a preorder traversal of T, and post(v) be the number of nodes visited up to and including v during a postorder traversal of T. The lowest common ancestor of vertices u and v in T is a vertex w of T such that w is an ancestor of both u and v, and no child of w is an ancestor of both u and v. Let (u, v) be an edge in G that is not in T, such that pre(u) < pre(v). Which of the following statements about u and v must be true?\nI. post(u) < post(v)\nII. u is an ancestor of v in T.\nIII. If w is the lowest common ancestor of u and v in T, then w = u.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "II and III"}], "answerKey": "D", "model_answer": "man: \u200b"}
{"question": "In systems with support for automatic memory management, a garbage collector typically has the responsibility for reclaiming allocated memory objects whose contents cannot affect any future legal computation. Such objects are identified by determining that they cannot be reached from a root set. Which of the following is NOT part of the root set in a typical garbage collector?", "choices": [{"label": "A", "text": "Actual parameters of the active procedures"}, {"label": "B", "text": "Dynamically allocated objects on the heap"}, {"label": "C", "text": "Global variables of the program"}, {"label": "D", "text": "Local variables on the call stack"}], "answerKey": "B", "model_answer": "The correct answer is (A) Actual parameters of the active procedures.\nThe root set in a typical garbage collector is the set of all data structures that are directly or indirectly accessible from the code executing in the program. Actual parameters of the active procedures, on the other hand, are not part of the root set, since they are passed as arguments to the procedures and are not directly accessible from the code. Dynamically allocated objects on the heap, global variables of the program, and local variables on the call stack are all part of the root set, as they can be reached from the code executing in the program and need to be reclaimed by the garbage collector."}
{"question": "In the Internet Protocol (IP) suite of protocols, which of the following best describes the purpose of the Address Resolution Protocol?", "choices": [{"label": "A", "text": "To translate Web addresses to host names"}, {"label": "B", "text": "To determine the IP address of a given host name"}, {"label": "C", "text": "To determine the hardware address of a given host name"}, {"label": "D", "text": "To determine the hardware address of a given IP address"}], "answerKey": "D", "model_answer": "The correct answer is (B) To determine the IP address of a given host name.\n\nAddress Resolution Protocol (ARP) is a protocol in the Internet Protocol (IP) suite of protocols that maps an IP address to a hardware address (also known as a physical or link layer address). When a device wants to send data to another device on the same network, it needs to know the hardware address of the device it wants to communicate with. ARP allows it to determine the hardware address of the device by knowing its IP address.\nARP is typically used in local area networks (LANs) and is typically used by devices on the same subnet to communicate with each other. It operates at the data link layer of the OSI model and is typically used in conjunction with the internet protocol (IP) to route data between devices on different networks.\nIn summary, the purpose of ARP is to map an IP address to a hardware address, which allows devices on the same network to communicate with each other."}
{"question": "Which of the following language features requires that stack-based storage allocation be used rather than static allocation?", "choices": [{"label": "A", "text": "Recursive procedures"}, {"label": "B", "text": "Arbitrary goto's"}, {"label": "C", "text": "Two-dimensional arrays"}, {"label": "D", "text": "Integer-valued functions"}], "answerKey": "A", "model_answer": "The correct answer is (C) Two-dimensional arrays.\nTwo-dimensional arrays require stack-based storage allocation because they are dynamically allocated, which means that memory is allocated on the stack during runtime.\nRecursive procedures, arbitrary goto's, and integer-valued functions can all be statically allocated or dynamically allocated, but they do not require stack-based storage allocation.\nRecursive procedures are functions that call themselves, and their memory is allocated on the stack when they are called. Arbitrary goto's are jump statements that transfer control to an arbitrary location in the program, and they do not require stack-based storage allocation. Integer-valued functions are functions that return an integer value, and their memory is allocated on the stack or the heap, depending on their return type.\nTherefore, the correct answer is (C) Two-dimensional arrays."}
{"question": "Which of the following is not a sentence that is generated by the grammar A -> BC, B -> x|Bx, C -> B|D, D -> y|Ey, E -> z?", "choices": [{"label": "A", "text": "xyz"}, {"label": "B", "text": "xy"}, {"label": "C", "text": "xxzy"}, {"label": "D", "text": "xxxxy"}], "answerKey": "A", "model_answer": "The sentence that is not generated by the grammar A -> BC, B -> x|Bx, C -> B|D, D -> y|Ey, E -> z is (A) xyz.\nThe correct sentence is (A) BCxzy, not (A) xyz.\nHere is how the grammar produces (A) BCxzy:\nB -> xy|Bxz\nC -> BC|Bxz\nx -> xyz\nThis sentence has the structure (B) xy followed by (C) BC and then (A) xyz."}
{"question": "Let T (n) be defined by T(1) = 7 and T(n + 1) = 3n + T(n) for all integers n \u2265 1. Which of the following represents the order of growth of T(n) as a function of n?", "choices": [{"label": "A", "text": "\u0398(n)"}, {"label": "B", "text": "\u0398(n log n)"}, {"label": "C", "text": "\u0398(n^2)"}, {"label": "D", "text": "\u0398(n^2 log n)"}], "answerKey": "C", "model_answer": "The given recurrence relation is T(n) = 3n + T(n - 1) for all integers n \u2265 1. By analyzing the recurrence relation, we can see that the order of growth of T(n) is O(n).\nTo see why, consider the first few terms of the sequence:\nT(1) = 7\nT(2) = 3(1) + T(0) = 3 + 0 = 3\nT(3) = 3(2) + T(1) = 3(2) + 3 = 9\nT(4) = 3(3) + T(2) = 3(3) + 9 = 27\nT(5) = 3(4) + T(3) = 3(4) + 27 = 81\nAs we can see, the difference between successive terms is always equal to the previous term, except for the first term, which is 7. This indicates that the sequence is monotonically increasing, which means that the order of growth is O(n).\nTherefore, the correct answer is:\n(A) \u0398(n)"}
{"question": "Which of the following problems is (are) decidable?\nI. Given a (finite) string w, is w a prefix of the decimal expansion of \u03c0?\nII. Given a program and an input, is the program\u2019s output the decimal expansion of \u03c0?\nIII. Given a program that takes as input a prefix of the decimal expansion of \u03c0, is the program\u2019s output always the same for every prefix?", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "I and II only"}], "answerKey": "A", "model_answer": "he correct answer is (D) I and II only.\n\nBoth problems I and II are decidable. Problem I is a decision problem because we can use a finite automaton to check if a given string is a prefix of the decimal expansion of \u03c0. Problem II is also a decision problem because we can use a program to check if the output of a program is the decimal expansion of \u03c0.\n\nOn the other hand, problem III is undecidable because we cannot determine whether a program's output is always the same for every prefix of the decimal expansion of \u03c0. This is because there are an infinite number of possible prefixes of \u03c0, and a program may produce different outputs for different prefixes. Therefore, we cannot determine the truth value of this statement for all possible inputs.\n\nSo, the correct answer is (D) I and II only."}
{"question": "Which of the following statements about circuits is (are) true?\nI. Combinational circuits may have feedback; sequential circuits do not.\nII. Combinational circuits have a \"memoryless\" property; sequential circuits do not.\nIII. Both sequential and combinational circuits must be controlled by an external clock.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "I and II only"}, {"label": "D", "text": "II and III only"}], "answerKey": "B", "model_answer": "rrect answer is (C) I and II only. This is because:\n\nI. Feedback is possible in combinational circuits, but not in sequential circuits.\nII. Combinational circuits have a \"memoryless\" property, which means they do not retain information from previous inputs, while sequential circuits do retain information and can perform different operations based on previous inputs.\nIII. Both sequential and combinational circuits require an external clock to operate, but the requirement is more important for sequential circuits than for combinational circuits."}
{"question": "Two single-user workstations are attached to the same local area network. On one of these workstations, file pages are accessed over the network from a file server; the average access time per page is 0.1 second. On the other of these workstations, file pages are accessed from a local disk; the average access time per page is 0.05 second. A particular compilation requires 30 seconds of computation and 200 file page accesses. What is the ratio of the total time required by this compilation if run on the diskless (file server) workstation to the total time required if run on the workstation with the local disk, if it is assumed that computation is not overlapped with file access?", "choices": [{"label": "A", "text": "1/1"}, {"label": "B", "text": "5/4"}, {"label": "C", "text": "5/3"}, {"label": "D", "text": "10/5"}], "answerKey": "B", "model_answer": "Let's analyze the given question step by step:\nTwo single-user workstations are attached to the same local area network. One workstation accesses file pages over the network from a file server, with an average access time per page of 0.1 second. The other workstation accesses file pages from a local disk, with an average access time per page of 0.05 second. A particular compilation requires 30 seconds of computation and 200 file page accesses.\n\nGiven the choices: (A) 1/1, (B) 5/4, (C) 5/3, (D) 10/5, the correct answer is (D) 10/5.\n\nTo find the ratio of the total time required on the diskless workstation to the total time required on the workstation with the local disk, we need to compare the average access time per page on both workstations. The average access time per page on the diskless workstation is 0.1 second, and on the workstation with the local disk, it is 0.05 second.\n\nLet's call the total time required for the compilation on the diskless workstation 'T1', and the total time required for the compilation on the workstation with the local disk 'T2'. We need to find the ratio of T1 to T2:\nT1 = 0.1 \\* 200 = 20 \\* 0.1 = 2\nT2 = 0.05 \\* 200 = 10 \\* 0.05 = 0.5\n\nSo, the correct answer is (D) 10/5, which means the total time required for the compilation on the workstation with the local disk is 10 times"}
{"question": "Assume that a debugger places a breakpoint at a load instruction at virtual address 0x77E81234 (hexadecimal notation) in a debugged process P. If the text segment of P begins at 0x77E80000 in P\u2019s virtual address space and if the debugger has mapped this same text segment at 0x01000000 in its virtual address space, which of the following is the virtual address used by the debugger in its WRITE operation, along with a description of how the debugger has mapped the virtual memory page containing this address?", "choices": [{"label": "A", "text": "0x01001234; page mapped with READ/WRITE access"}, {"label": "B", "text": "0x01001234; page mapped with COPY-ON-WRITE access"}, {"label": "C", "text": "0x76E81234; page mapped with READ/WRITE access"}, {"label": "D", "text": "0x76E81234; page mapped with COPY-ON-WRITE access"}], "answerKey": "A", "model_answer": "For the given question, let's analyze each choice:\n(A) 0x01001234; page mapped with READ/WRITE access\nThis option is incorrect because the debugger has mapped the same text segment at 0x01000000 in its virtual address space, so the debugger should use WRITE access only for the same page.\n(B) 0x01001234; page mapped with COPY-ON-WRITE access\nThis option is incorrect because COPY-ON-WRITE access is not applicable in this situation. If the debugger has mapped the text segment at 0x01000000 in its virtual address space, it needs to use WRITE access for the corresponding page.\n(C) 0x76E81234; page mapped with READ/WRITE access\nThis choice is incorrect because the debugger has mapped the text segment at 0x01000000, not 0x76E80000, in its virtual address space. The debugger should use WRITE access for the same page in its virtual address space.\n(D) 0x76E81234; page mapped with COPY-ON-WRITE access\nThis choice is incorrect because COPY-ON-WRITE access is not applicable in this situation. If the debugger has mapped the text segment at 0x01000000 in its virtual address space, it needs to use WRITE access for the corresponding page.\n\nThe correct answer is (B) 0x01001234; page mapped with READ/WRITE access."}
{"question": "Which of the following considerations applies (apply) to choosing the page size in a paging system?\nI. An advantage of larger pages is that they lead to smaller page tables.\nII. An advantage of smaller pages is that they lead to less waste due to internal fragmentation.\nIII. Normally, the dominant factor in disk access time is not dependent on page length, so longer pages can be used advantageously.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "I and III only"}, {"label": "D", "text": "I, II, and III"}], "answerKey": "D", "model_answer": "lain the relationship between the choice of page size and the page table?"}
{"question": "Two processors, M-5 and M-7, implement the same instruction set. Processor M-5 uses a 5-stage pipeline and a clock cycle of 10 nanoseconds. Processor M-7 uses a 7-stage pipeline and a clock cycle of 7.5 nanoseconds. Which of the following is (are) true?\nI. M-7\u2019s pipeline has better maximum throughput than M-5\u2019s pipeline.\nII. The latency of a single instruction is shorter on M-7\u2019s pipeline than on M-5\u2019s pipeline.\nIII. Programs executing on M-7 will always run faster than programs executing on M-5.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "I and III"}, {"label": "D", "text": "II and III"}], "answerKey": "A", "model_answer": "I and III"}
{"question": "Which of the following pairs of 8-bit, two's-complement numbers will result in overflow when the members of the pairs are added?", "choices": [{"label": "A", "text": "11111111, 00000001"}, {"label": "B", "text": "00000001, 10000000"}, {"label": "C", "text": "11111111, 10000001"}, {"label": "D", "text": "10000001, 10101010"}], "answerKey": "D", "model_answer": "The correct answer is (D) 10000001, 10101010.\n\nTo understand why, let's examine each pair of numbers:\n(A) 11111111, 00000001\n(B) 00000001, 10000000\n(C) 11111111, 10000001\n(D) 10000001, 10101010\n\nBoth members of each pair are 8-bit two's-complement numbers, which means that they can represent numbers between -128 and 127 (in 8-bit binary). If we add the members of each pair, the result will be a 16-bit two's-complement number.\nSince both members of each pair are 8-bit, we can ignore the sign bit and use only the 7-bit integer part. Adding these integer parts will result in a 7-bit binary number.\nSince both numbers are less than or equal to 127, the sum will always be less than or equal to 255.\nTherefore, neither pair (A), (B), (C), nor (D) will result in an overflow when the members of the pairs are added.\nHowever, pair (D) 10000001, 10101010, will result in an overflow because the sum of the integer parts is 255 in binary, which is greater than 2^7 (or 128) and requires overflowing into the sign bit."}
{"question": "Two computers communicate with each other by sending data packets across a local area network. The size of these packets is 1,000 bytes. The network has the capacity to carry 1,000 packets per second. The CPU time required to execute the network protocol to send one packet is 10 milliseconds. The maximum rate at which one computer can send data to another is approximately", "choices": [{"label": "A", "text": "10,000 bytes/second"}, {"label": "B", "text": "25,000 bytes/ second"}, {"label": "C", "text": "100,000 bytes/ second"}, {"label": "D", "text": "500,000 bytes/ second"}], "answerKey": "C", "model_answer": ""}
{"question": "Consider the following grammar.\nS \u2192 ( S )\nS \u2192 x\nWhich of the following statements is (are) true?\nI. The grammar is ambiguous.\nII. The grammar is suitable for top-down parsing.\nIII. The grammar is suitable for bottom-up parsing.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "II and III only"}], "answerKey": "D", "model_answer": "he correct answer is (D) II and III only.\n\nThe given grammar is:\nS \u2192 ( S )\nS \u2192 x\nThis grammar is a context-free grammar, which is suitable for both top-down parsing and bottom-up parsing. The two statements (II and III) are both true, as the grammar is not ambiguous."}
{"question": "Hash tables can contribute to an efficient average-case solution for all of the problems described below EXCEPT:", "choices": [{"label": "A", "text": "Counting distinct values: Given a set of n keys, determine the number of distinct key values."}, {"label": "B", "text": "Dynamic dictionary: Support the operations of insert, delete, and search in a dictionary."}, {"label": "C", "text": "Range search: Given values a and b, find all the records whose key value is in the range a, b."}, {"label": "D", "text": "Symbol table lookup: Given a program identifier, find its type and address."}], "answerKey": "C", "model_answer": "lain the difference between a hash table and a tree?"}
{"question": "Let A be a finite set with m elements, and let B be a finite set with n elements. The number of distinct functions mapping A into B is", "choices": [{"label": "A", "text": "n^m"}, {"label": "B", "text": "n!/(n - m)!"}, {"label": "C", "text": "n!"}, {"label": "D", "text": "n!/(m!(n - m)!)"}], "answerKey": "A", "model_answer": "The correct answer is (B) n!/(n - m)!, which is the number of ways to choose m elements from a set of n elements.\n\nTo see why, let's break it down step by step:\n1. There are n choices for the first element of the set A.\n2. Out of those n choices, there are (n-1) choices for the second element of the set A.\n3. Out of those (n-1) choices, there are (n-2) choices for the third element of the set A, and so on.\n4. Finally, out of those (n-m) choices for the last m elements of the set A, there is 1 choice for each of those elements.\n\nSo the total number of ways to choose m elements from a set of n elements is (n-1)*(n-2)*...*((n-m+1), which simplifies to n!/(n - m)!)"}
{"question": "To compute the matrix product M_1M_2, where M_1 has p rows and q columns and where M_2 has q rows and r columns, takes time proportional to pqr, and the result is a matrix of p rows and r columns. Consider the product of three matrices N_1N_2N_3 that have, respectively, w rows and x columns, x rows and y columns, and y rows and z columns. Under what condition will it take less time to compute the product as (N_1N_2)N_3 (i.e., multiply the first two matrices first) than to compute it as N_1(N_2 N_3)?", "choices": [{"label": "A", "text": "There is no such condition; i.e., they will always take the same time."}, {"label": "B", "text": "1/x + 1/z < 1/w + 1/y"}, {"label": "C", "text": "x > y"}, {"label": "D", "text": "1/w + 1/x < 1/y + 1/z"}], "answerKey": "B", "model_answer": "The correct answer is (B) 1/x + 1/z < 1/w + 1/y.\nThe time it takes to compute the matrix product M\\_1M\\_2M\\_3 depends on the dimensions of the matrices and the number of operations needed to perform the multiplication. In this case, the product of three matrices N\\_1N\\_2N\\_3 has a different structure than the product of two matrices M\\_1M\\_2, so the time required to compute the product will depend on the specific dimensions and structure of the matrices involved.\nThe condition given in choice (B) states that the sum of the ratios of the number of columns in one matrix to the number of rows in another matrix is less than 1, which means that the matrices have different sizes and might require different operations to multiply them together. Therefore, it is possible that computing the product as (N\\_1N\\_2)N\\_3 might take less time than computing it as N\\_1(N\\_2 N\\_3), depending on the specific matrices involved and the way they are multiplied.\nTherefore, the correct answer is (B) 1/x + 1/z < 1/w + 1/y."}
{"question": "The hit ratio of a cache memory is the percentage of accesses (reads and writes) for which data are found in the cache. Write-through is a policy whereby every write operation updates main memory. Write-back is a policy whereby a write operation to a line found in the cache does not affect main memory until the line is evicted from the cache. Write-allocation is a policy whereby a cache line is allocated and loaded on a write-miss. If it is assumed that write-allocation is always used, which of the following is true?", "choices": [{"label": "A", "text": "Write-back usually results in a better hit ratio than write-through."}, {"label": "B", "text": "Write-through usually results in a better hit ratio than write-back."}, {"label": "C", "text": "The percentage of write operations resulting in a main memory operation will never be larger for write-back than for write-through."}, {"label": "D", "text": "The percentage of write operations resulting in a main memory operation will never be larger for writethrough than for write-back."}], "answerKey": "C", "model_answer": "\u200b"}
{"question": "A particular disk unit uses a bit string to record the occupancy or vacancy of its tracks, with O denoting vacant and 1 denoting occupied. A 32-bit segment of this string has the hexadecimal value D4FE2003. The percentage of occupied tracks for the corresponding part of the disk, to the nearest percent, is", "choices": [{"label": "A", "text": "12%"}, {"label": "B", "text": "25%"}, {"label": "C", "text": "38%"}, {"label": "D", "text": "44%"}], "answerKey": "D", "model_answer": "Without additional information, it is not possible to determine the percentage of occupied tracks for the corresponding part of the disk. The given hexadecimal value of the bit string is not enough information to determine the state of the tracks. The answer cannot be determined from the given information."}
{"question": "An Euler circuit of an undirected graph is a circuit in which each edge of the graph appears exactly once. Which of the following undirected graphs must have an Euler circuit?\nI. A complete graph with 12 vertices\nII. A complete graph with 13 vertices\nIII. A tree with 13 vertices", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "I and II"}], "answerKey": "B", "model_answer": "n\n                      A\n                      B\n                      C\n                      D\n                      E\n                      F\n                      G\n                      H\n                      I\n                      J\n                      K\n                      L\n                      M\n                      N\n\n    I. A complete graph with 12 vertices\n    II. A complete graph with 13 vertices\n    III. A tree with 13 vertices\n```\n\n```markdown\n                      A\n                      B\n                      C\n                      D\n                      E\n                      F\n                      G\n                      H\n                      I\n                      J\n                      K\n                      L\n                      M\n                      N\n\n    D. An Euler circuit of an undirected graph is a circuit in which each edge of the graph appears exactly once.\n    E. A connected graph is one in which there is a path between any two vertices.\n    F. An Euler path is a path in which each vertex is visited exactly once.\n    G. A connected graph is one in which there is a path between any two vertices.\n    H. An Euler path is a path in which each vertex is visited exactly once.\n    I. An undirected graph is a graph in which there is no designated direction for the edges.\n    J. An Euler path is a path that visits every vertex exactly once.\n    K. An Euler path is a path that visits every vertex exactly once.\n    L. An Euler path is a path that visits every vertex exactly once.\n    M. An Euler circuit is a circuit that visits every edge exactly once.\n    N. An Euler circuit is a circuit that visits every edge exactly once.\n```\nThe correct answer is: D. An Euler circuit of an undirected graph is a circuit in which each edge of the graph appears exactly once."}
{"question": "Which of the following characteristics of a programming language is best specified using a context-free grammar?", "choices": [{"label": "A", "text": "Identifier length"}, {"label": "B", "text": "Maximum level of nesting"}, {"label": "C", "text": "Operator precedence"}, {"label": "D", "text": "Type compatibility"}], "answerKey": "C", "model_answer": "The characteristic of a programming language that is best specified using a context-free grammar is (C) Operator precedence. Operator precedence defines the order in which operators are performed in a program, which is an essential aspect of programming language syntax that can be represented using a context-free grammar. The other choices, (A) Identifier length, (B) Maximum level of nesting, and (D) Type compatibility, involve characteristics of programming languages that are not as well-suited to representation using a context-free grammar."}
{"question": "Which of the following statements about datagrams sent by a node in a network using IPv4 protocol is (are) true?\nI. Datagrams at the source must be the size of the smallest maximum transmission unit (MTU) of all the links on a path to the destination.\nII. Datagrams may be fragmented during routing.\nIII. Datagrams are reassembled only at the destination.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "II and III"}], "answerKey": "D", "model_answer": "correct answer is (D) II and III.\n\nDatagrams at the source must be the size of the smallest maximum transmission unit (MTU) of all the links on a path to the destination. This means that the datagram must be fragmented during routing, and datagrams must be reassembled only at the destination."}
{"question": "A starvation-free job-scheduling policy guarantees that no job waits indefinitely for service. Which of the following job-scheduling policies is starvation-free?", "choices": [{"label": "A", "text": "Round-robin"}, {"label": "B", "text": "Priority queuing"}, {"label": "C", "text": "Shortest job first"}, {"label": "D", "text": "Youngest job first"}], "answerKey": "A", "model_answer": "The correct answer is (C) Shortest job first. This policy allows the shortest job to be served first, which means that jobs with shorter processing times will not have to wait indefinitely for service. This ensures that no job waits indefinitely for service, which makes it starvation-free.\n\nHere's why each of the other policies is not starvation-free:\n(A) Round-robin: This policy assigns each job a fixed time slot in the schedule, which means that a job may have to wait for a long time if its assigned time slot is not available.\n(B) Priority queuing: This policy allows high-priority jobs to be served before regular jobs, but it does not guarantee that no job will have to wait indefinitely for service. Jobs with lower priority may still have to wait for a long time if there are no available servers.\n(D) Youngest job first: This policy is not starvation-free because a job may have to wait indefinitely if it is a new job that arrives after all other jobs have completed their processing. If this happens, the job will have to wait until there is an available server before it can be served."}
{"question": "Of the following, which gives the best upper bound for the value of f(N) where f is a solution to the recurrence f(2N + 1) = f(2N) = f(N) + log N for N >= 1, with f(1) = 0?", "choices": [{"label": "A", "text": "O(log N)"}, {"label": "B", "text": "O(N log N)"}, {"label": "C", "text": "O(log N) + 0(1)"}, {"label": "D", "text": "O((log N)^2)"}], "answerKey": "D", "model_answer": ""}
{"question": "Company X shipped 5 computer chips, 1 of which was defective, and Company Y shipped 4 computer chips, 2 of which were defective. One computer chip is to be chosen uniformly at random from the 9 chips shipped by the companies. If the chosen chip is found to be defective, what is the probability that the chip came from Company Y?", "choices": [{"label": "A", "text": "2 / 9"}, {"label": "B", "text": "4 / 9"}, {"label": "C", "text": "1 / 2"}, {"label": "D", "text": "2 / 3"}], "answerKey": "D", "model_answer": ""}
{"question": "Which of the following problems can be solved by a standard greedy algorithm?\nI. Finding a minimum spanning tree in an undirected graph with positive-integer edge weights\nII. Finding a maximum clique in an undirected graph\nIII. Finding a maximum flow from a source node to a sink node in a directed graph with positive-integer edge capacities", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "I and II only"}], "answerKey": "A", "model_answer": "n\n        C) III only\n```"}
{"question": "A program that checks spelling works in the following way. A hash table has been defined in which each entry is a Boolean variable initialized to false. A hash function has been applied to each word in the dictionary, and the appropriate entry in the hash table has been set to true. To check the spelling in a document, the hash function is applied to every word in the document, and the appropriate entry in the hash table is examined. Which of the following is (are) correct?\nI. true means the word was in the dictionary.\nII. false means the word was not in the dictionary.\nIII. Hash table size should increase with document size.", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "I and II only"}, {"label": "D", "text": "II and III only"}], "answerKey": "B", "model_answer": "The correct answer is (B) II only.\nExplanation:\nI. True means that the word was in the dictionary, but not necessarily that it was spelled correctly.\nII. False means that the word was not in the dictionary, but not necessarily that it was misspelled.\nIII. The hash table size should be large enough to accommodate all the words in the document, but it does not necessarily increase with the size of the document.\nTherefore, only statement II is correct, which means that false means the word was not in the dictionary."}
{"question": "One approach to handling fuzzy logic data might be to design a computer using ternary (base-3) logic so that data could be stored as \u201ctrue,\u201d \u201cfalse,\u201d and \u201cunknown.\u201d If each ternary logic element is called a flit, how many flits are required to represent at least 256 different values?", "choices": [{"label": "A", "text": "4"}, {"label": "B", "text": "5"}, {"label": "C", "text": "6"}, {"label": "D", "text": "7"}], "answerKey": "C", "model_answer": "(D) 7.\nTo represent at least 256 different values using ternary logic (base-3), you would need 3 bits (since 3 x 2 = 6 and 3 x 2 x 2 = 18, which is one more than 256). Therefore, 7 flits (ternary logic elements or \"flits\") would be required to represent at least 256 different values."}
{"question": "Local caching of files is common in distributed file systems, but it has the disadvantage that", "choices": [{"label": "A", "text": "Temporary inconsistencies among views of a file by different machines can result"}, {"label": "B", "text": "The file system is likely to be corrupted when a computer crashes"}, {"label": "C", "text": "A much higher amount of network traffic results"}, {"label": "D", "text": "Caching makes file migration impossible"}], "answerKey": "A", "model_answer": "The correct answer is (A) Temporary inconsistencies among views of a file by different machines can result.\nCaching files locally in a distributed file system can lead to temporary inconsistencies among the views of a file by different machines. For example, if two different machines access and modify the same file simultaneously, they may see different versions of the file due to caching. This can result in temporary inconsistencies until the file is properly updated and synchronized across all of the machines involved.\n\nWhile caching can help improve the performance and speed of accessing files in a distributed file system, it can also lead to temporary inconsistencies among the views of a file by different machines. This is because caching can cause different machines to have different versions of the same file locally cached, which can lead to temporary discrepancies in the way the file is viewed and accessed by different machines.\n\nOverall, caching can be a useful tool in distributed file systems, but it is important to be aware of the potential temporary inconsistencies that can arise due to caching. Proper synchronization and management of caching can help minimize these inconsistencies and ensure that the file system remains coherent and consistent for all machines accessing the files."}
{"question": "Array A contains 256 elements of 4 bytes each. Its first element is stored at physical address 4,096.\nArray B contains 512 elements of 4 bytes each. Its first element is stored at physical address 8,192.\nAssume that only arrays A and B can be cached in an initially empty, physically addressed, physically tagged, direct-mapped, 2K-byte cache with an 8-byte block size. The following loop is then executed.\nfor (i = 0; i < 256; i++)\n        A[i] = A[i] + B[2*i];\nDuring the execution of the loop, how many bytes will be written to memory if the cache has a write-through policy?", "choices": [{"label": "A", "text": "0"}, {"label": "B", "text": "256"}, {"label": "C", "text": "1024"}, {"label": "D", "text": "2048"}], "answerKey": "C", "model_answer": "correct answer is (B) 256.\n\nIn this problem, the arrays A and B contain 256 and 512 elements, respectively. The loop is iterating through all elements of array A, and for each element, it is adding the corresponding element of array B. Since array B contains 512 elements, it will be accessed 256 times during the loop.\nSince array B contains twice as many elements as array A, it will be cached twice in the cache. The cache has an 8-byte block size, so each cache block will contain one element from array B. Therefore, each iteration of the loop will write 512 bytes to memory.\nSince the cache has a write-through policy, all modifications to the cache blocks will be immediately written to memory. Therefore, the loop will write 256 \\* 512 = 122,480 bytes to memory."}
{"question": "At time 0, five jobs are available for execution on a single processor, with service times of 25, 15, 5, 3, and 2 time units. Which of the following is the minimum value of the average completion time of these jobs?", "choices": [{"label": "A", "text": "50"}, {"label": "B", "text": "208/5"}, {"label": "C", "text": "92/5"}, {"label": "D", "text": "10"}], "answerKey": "C", "model_answer": "To calculate the minimum average completion time, we need to determine the service times that result in the shortest overall completion time. We can do this by dividing the total completion time by the number of jobs with longer service times.\nLet's evaluate each choice:\n(A) 50: 50 / (5 + 25 + 15 + 5 + 3) = 10\n(B) 208/5: 208/5 / (5 + 25 + 15 + 5 + 3) = 10\n(C) 92/5: 92/5 / (5 + 25 + 15 + 5 + 3) = 10\n(D) 10: 10 / (5 + 25 + 15 + 5 + 3) = 10\nSo, the minimum average completion time is 10, which corresponds to choice (D). Therefore, the correct answer is (D): 10."}
{"question": "Let G = (V, E) be a connected, undirected graph, and let a and b be two distinct vertices in V. Let P_1 be the problem of finding a shortest simple path between a and b, and let P_2 be the problem of finding a longest simple path between a and b. Which of the following statements about P_1 and P_2 is true?", "choices": [{"label": "A", "text": "Both P_1 and P_2 can be solved in polynomial time."}, {"label": "B", "text": "P_1 can be solved in polynomial time but P_2 is not known to be solvable in polynomial time."}, {"label": "C", "text": "P_1 is not known to be solvable in polynomial time but P_2 can be solved in polynomial time."}, {"label": "D", "text": "It is not known whether either P_1 or P_2 can be solved in polynomial time."}], "answerKey": "B", "model_answer": "\u200b"}
{"question": "A major advantage of direct mapping of a cache is its simplicity. The main disadvantage of this organization is that", "choices": [{"label": "A", "text": "it does not allow simultaneous access to the intended data and its tag"}, {"label": "B", "text": "it is more expensive than other types of cache organizations"}, {"label": "C", "text": "the cache hit ratio is degraded if two or more blocks used alternately map onto the same block frame in the cache"}, {"label": "D", "text": "its access time is greater than that of other cache organizations"}], "answerKey": "C", "model_answer": "(C) the cache hit ratio is degraded if two or more blocks used alternately map onto the same block frame in the cache."}
{"question": "Let M be a single-tape, deterministic Turing machine with tape alphabet {blank,0,1}, and let C denote the (possibly infinite) computation of M starting with a blank tape. The input to each problem below is M, together with a positive integer n. Which of the following problems is (are) decidable?\nI. The computation C lasts for at least n steps.\nII. The computation C lasts for at least n steps, and M prints a 1 at some point after the nth step.\nIII. M scans at least n distinct tape squares during the computation C.", "choices": [{"label": "A", "text": "None"}, {"label": "B", "text": "III only"}, {"label": "C", "text": "I and II only"}, {"label": "D", "text": "I and III only"}], "answerKey": "D", "model_answer": "The answer is (D) I and III only.\n\nThe problem of determining whether M scans at least n distinct tape squares during the computation is undecidable, because there is no way to determine in advance whether a given computation will scan at least n distinct tape squares.\nThe problem of determining whether the computation C lasts for at least n steps is undecidable, because there is no way to determine in advance whether a given computation will last for at least n steps.\nThe problem of determining whether the computation C lasts for at least n steps and M prints a 1 at some point after the nth step is decidable, because we can simply check if M prints a 1 after the nth step.\n\nTherefore, the correct answer is (D) I and III only."}
{"question": "A 3-way, set-associative cache is", "choices": [{"label": "A", "text": "one in which each main memory word can be stored at any of 3 cache locations"}, {"label": "B", "text": "effective only if 3 or fewer processes are running alternately on the processor"}, {"label": "C", "text": "possible only with write-back"}, {"label": "D", "text": "faster to access than a direct-mapped cache"}], "answerKey": "A", "model_answer": "The correct answer is (A).\nA 3-way, set-associative cache is a type of cache that can store each memory word in one of three locations. Each set in the cache is associated with a specific location in main memory, and each memory word can be stored at any of the three cache locations associated with it. This allows for more efficient use of cache memory by allowing multiple words to be stored in the same set and the same cache locations.\nOption (B) is incorrect because a 3-way, set-associative cache can work effectively even if more than three processes are running alternately on the processor.\nOption (C) is incorrect because a 3-way, set-associative cache can be implemented with write-through or write-back policies.\nOption (D) is incorrect because a 3-way, set-associative cache may have slower access times than a direct-mapped cache, especially if it is small or if many of the cache lines are not frequently used. However, it can be faster than a fully-associative cache because it requires fewer comparisons to find a matching line.\n\n\ubc88\uc5ed\uacb0\uacfc  \n\uc62c\ubc14\ub978 \ub2f5\ubcc0\uc740 (A)\uc785\ub2c8\ub2e4.\n3-way, set-associative \uce90\uc2dc\ub294 \uba54\ubaa8\ub9ac \ub2e8\uc5b4\ub97c \uac01\uac01\uc758 3\uac1c\uc758 \uce90\uc2dc \uc704\uce58\uc5d0 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \uc885\ub958\uc758 \uce90\uc2dc\uc785\ub2c8\ub2e4. \uac01 \uce90\uc2dc \uc138\ud2b8\ub294 \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc5b4\ub5a4 \uc704\uce58\uc5d0 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \uce90\uc2dc \uc704\uce58\uc640 \ud568\uaed8 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc73c\uba70, \uac01 \uce90\uc2dc \uc704\uce58\uc5d0 \ub530\ub77c \uce90\uc2dc \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ub420 \uc218 \uc788\ub294 \ubaa8\ub4e0 \uba54\ubaa8\ub9ac \ub2e8\uc5b4\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uce90\uc2dc \uba54\ubaa8\ub9ac\uc758 \ud6a8\uc728\uc801\uc778 \uc0ac\uc6a9\uc5d0 \ub354 \ud6a8\uacfc\uc801\uc778 \ubc29\ubc95\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.\n(B)\uc740 \ubc18\ubcf5 \ucc98\ub9ac\ub97c \uc704\ud574 \uc0bc\ud751 \ucd94\uc801 \uce90\uc2dc \ub9cc\uc774 \ub354 \ud6a8\uacfc\uc801\uc77c \ubfd0\uc774\uba70 3\uac1c \uc774\uc0c1\uc758 \ud504\ub85c\uc138\uc11c\uac00 \ub300\uccb4\ub85c \uc2e4\ud589\ub418\ub294 \uacbd\uc6b0\uc5d0\ub294 \ud6a8\uacfc\uc801\uc774\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n(C)\uc740 \uc798\ubabb\ub41c \uc120\ud0dd\uc785\ub2c8\ub2e4. 3-way, set-associative \uce90\uc2dc\ub294 \uc784\uc758\uc758 \uc785\ub825 \ubc84\ud37c\uac00 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \uc4f0\ub808\uae30 \ucd94\uc801 \uce90\uc2dc\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \uc784\uc758\uc758 \uac12\uc73c\ub85c \uc4f0\ub808\uae30 \ucd94\uc801 \ub808\uc774\ud2b8 \ud328\ud134\uc744 \ucde8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uce90\uc2dc \uba54\ubaa8\ub9ac\uc5d0 \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n(D)\uc740 \ub9de\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. 3-way, set"}
{"question": "Consider an object-oriented language in which all entities are objects. Two relationships arise: (1) the instance relationship, between an object and the class of which that object is a member, and (2) the subclass relationship, between a class and the superclass from which that class inherits properties. In such a language, when a message is sent to an object requesting execution of one of its methods (procedures), the method is located by following", "choices": [{"label": "A", "text": "one instance link and then zero or more subclass links"}, {"label": "B", "text": "one or more instance links and then one or more subclass links"}, {"label": "C", "text": "one or more instance links"}, {"label": "D", "text": "one subclass link and then one or more instance links"}], "answerKey": "A", "model_answer": ""}
{"question": "In a pipelined RISC computer where all arithmetic instructions have the same CPI (cycles per instruction), which of the following actions would improve the execution time of a typical program?\nI. Increasing the clock cycle rate\nII. Disallowing any forwarding in the pipeline\nIII. Doubling the sizes of the instruction cache and the data cache without changing the clock cycle time", "choices": [{"label": "A", "text": "I only"}, {"label": "B", "text": "II only"}, {"label": "C", "text": "III only"}, {"label": "D", "text": "I and III"}], "answerKey": "D", "model_answer": ") I and III\nExplanation: The two main factors that affect the execution time of a program in a pipelined RISC computer are the clock cycle rate and the size of the instruction and data caches.\nOption I, increasing the clock cycle rate, would increase the number of cycles available for each instruction, thus decreasing the CPI and improving the execution time of a program.\nOption III, doubling the sizes of the instruction and data caches, would also improve the execution time of a program by allowing more instructions and data to be stored in the cache, reducing the time spent fetching instructions and data from memory.\nOption II, disallowing any forwarding in the pipeline, would likely have a negative impact on execution time by slowing down the flow of instructions through the pipeline and increasing the overall time required to execute a program.\nOption C, simply doubling the sizes of the caches without changing the clock cycle time, would not have a significant effect on execution time because the CPI would remain the same.\nTherefore, the correct answer is D) I and III."}
{"question": "A microcomputer used for data acquisition and control is required to digitize and process four analog input signals and to output their average continually; i.e., in real time. The time for an external analog-to-digital converter (which is triggered by a CPU instruction) to digitize one input is 12 microseconds, and only one digitization occurs at a time. Five CPU instructions, including the triggering instruction, must be executed for each signal digitized. Ten CPU instructions are executed in order to average each set of four samples and output this value. The time to convert the output from digital to analog form is to be ignored. If it is assumed that suitable data buffering is employed, then the maximum average instruction execution time that allows the microcomputer to keep up with the input-output data rates, is", "choices": [{"label": "A", "text": "0.8 microseconds"}, {"label": "B", "text": "1.2 microseconds"}, {"label": "C", "text": "1.6 microseconds"}, {"label": "D", "text": "2.4 microseconds"}], "answerKey": "C", "model_answer": "The correct answer is (B) 1.2 microseconds.\nTo digitize and process four analog input signals, 12 microseconds are required for each signal, which means 50 microseconds are required in total. Averaging each set of four samples and outputting the value requires another 10 instructions, for a total of 60 microseconds. If suitable data buffering is employed, the maximum average instruction execution time is determined by the maximum rate at which data can be processed, which is one input digitization per 12 microseconds, or 8,000,000 instructions per second. Therefore, the maximum average instruction execution time is:\n\n10 instructions / 8,000,000 instructions per second = 0.000125 seconds per instruction\n\nSince each instruction takes 12 microseconds, the maximum average instruction execution time is 0.000125 seconds per instruction \\* 12 microseconds per instruction = 0.0125 microseconds per instruction.\nConverting this to the required time for each signal, we get:\n\n0.0125 microseconds per instruction / 5 instructions = 0.025 microseconds per signal\n\nTherefore, the maximum average instruction execution time that allows the microcomputer to keep up with the input-output data rates is 1.2 microseconds."}
{"question": "Suppose that a certain software product has a mean time between failures of 10,000 hours and has a mean time to repair of 20 hours. If the product is used by 100 customers, what is its availability?", "choices": [{"label": "A", "text": "80%"}, {"label": "B", "text": "90%"}, {"label": "C", "text": "98%"}, {"label": "D", "text": "99.80%"}], "answerKey": "D", "model_answer": ""}
